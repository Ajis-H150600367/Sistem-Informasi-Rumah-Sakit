<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="LogoPictureBox.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>